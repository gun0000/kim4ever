<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 쿼리만드는곳 -->
<mapper namespace="com.myezen.myapp.persistance.BikeRentService_Mapper">

<!-- 자전거 상세보기 : bikeVo와 bikeInfo를 조인하여 JoinVo에 매핑하는 select 문 -->
<select id="RentDetail" parameterType="int" resultType="com.myezen.myapp.domain.BikeJoinVo">
  SELECT
    b.bkidx,
    b.bikeCode,
    b.bikeType,
    b.bikeLocation,
    b.bikeState,
    i.bikeContent,
    i.rentPrice
  FROM
    bike1234 b
    JOIN bikeInfo1234 i ON b.bikeType = i.bikeType
  WHERE
    b.bkidx = #{bkidx}
</select>

<!-- bikeState Y(사용가능)에서 N(사용중)으로 변경쿼리 -->
<update id="updateBikeState" parameterType="int">
    UPDATE bike1234
    SET bikeState = 'N'
    WHERE bkidx = #{bkidx} 
</update>

<!-- bike1234와 rent1234 조인문으로 rsidx 꺼내오기 -->
<select id="bikeGetRsidx" resultType="int">
	SELECT b.RSIDX
  	FROM bike1234 a
  	JOIN rentalshop1234 b ON a.BIKELOCATION = b.RENTALSHOPNAME
  	WHERE a.bkidx = #{bkidx}
</select>

<!-- bike1234에서 대여하기버튼을 누르면 대여테이블인 rent1234로 데이터삽입 쿼리 -->
<insert id="insertRentInfo" parameterType="com.myezen.myapp.domain.BikeJoinVo">
  	INSERT INTO rent1234 (ridx, rentDay, rentPlace, bkidx, rsidx, midx)
	VALUES(ridx_seq.NEXTVAL, SYSDATE, #{rentPlace}, #{bkidx}, #{rsidx}, #{midx})
	<selectKey resultType="int" keyProperty="ridx" order="AFTER">
       select ridx_seq.CURRVAL as ridx FROM DUAL
    </selectKey>   
</insert>

<select id="getBikeLocationByBkidx" parameterType="int" resultType="java.lang.String">
        SELECT bikeLocation
        FROM bike1234
        WHERE bkidx = #{bkidx}
</select>




<select id="RentUseList" parameterType="int" resultType="com.myezen.myapp.domain.BikeJoinVo">
 SELECT
    b.bikeType,
    b.bikeState,
    b.bikeLocation,
    m.memberName,
    b.bikeCode,
    r.rentDay,
    i.rentPrice
  FROM
    bike1234 b
    JOIN bikeInfo1234 i ON b.bikeType = i.bikeType
    JOIN rent1234 r ON b.bkidx = r.bkidx
    JOIN member1234 m ON r.midx = m.midx
  WHERE
    r.bkidx = #{bkidx}
    ORDER BY r.rentDay DESC
	FETCH FIRST 1 ROW ONLY
</select>

<!-- 휴대폰 번호, 인증번호 데이터베이스에 저장 -->
<insert id="savePhoneNumberVerification" parameterType="com.myezen.myapp.domain.BikeJoinVo">
    INSERT INTO PHONE1234 (PHONENUMBER, VERIFICATIONCODE)
    VALUES (#{phoneNumber}, #{verificationCode})
</insert>

<!-- 인증번호를 받아서 일치 여부 확인 -->
<select id="verifyPhoneNumber" parameterType="java.util.HashMap" resultType="boolean">
 
    SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
	FROM PHONE1234
	WHERE PHONENUMBER = #{userPhoneNumber}
	AND VERIFICATIONCODE = #{randomNumber}
	AND VERIFICATIONSTATUS = 'N';
</select>

<!-- 휴대폰 번호를 받아서 해당 번호에 대해 저장된 인증번호를 가져옴 -->
<select id="getSavedRandomNumber" parameterType="java.lang.String" resultType="int">
    SELECT VERIFICATIONCODE
    FROM PHONE1234
    WHERE PHONENUMBER = #{userPhoneNumber}
    AND VERIFICATIONSTATUS = 'N'
    ORDER BY CREATED_AT DESC
    FETCH FIRST 1 ROW ONLY
</select>

<update id="updateVerificationStatus" parameterType="java.lang.String">
 UPDATE PHONE1234
    SET VERIFICATIONCODE = null,
        VERIFICATIONSTATUS = 'Y'
    WHERE PHONENUMBER = #{userPhoneNumber}
</update>

<!-- midx로 회원 정보 조회 -->
	<select id="getMemberPhoneByMidx" parameterType="int" resultType="com.myezen.myapp.domain.MemberVo">
	    SELECT memberPhone
	    FROM member1234
	    WHERE midx = #{midx}
	</select>
	<!-- 자전거 소개 페이지에서 자전거 추가 등록 -->
 	<insert id="insertBikeRent"  parameterType="com.myezen.myapp.domain.BikeJoinVo">
        INSERT INTO bikeInfo1234 (bikeType, bikeContent, rentPrice, uploadFile)
        VALUES (#{bikeType}, #{bikeContent}, #{rentPrice}, #{uploadFile})
    </insert>
    
    <!-- bike1234 자전거 정보 조회 -->
	<select id="getBikeList" resultType="com.myezen.myapp.domain.BikeJoinVo">
	    SELECT * FROM bikeInfo1234
	</select>

	<!-- 자전거 삭제 -->
	 <delete id="deleteBikeByType">
        DELETE FROM bikeInfo1234
        WHERE bikeType = #{bikeType}
    </delete>






<!-- dddddddddddddddddddddddddddddddddddddddddddddddd -->
	
	    <!-- 고장/신고 접수 -->
    <insert id="bikeRentErrorInsert" parameterType="errorv">
        INSERT INTO error1234(eidx,ridx,errorContent)
        VALUES(eidx_seq.NEXTVAL,#{1},#{0})
    </insert>
    <select id="bikeRentReturnCheck" resultType="com.myezen.myapp.domain.BikeJoinVo">
		SELECT * FROM rent1234
		JOIN bike1234 ON rent1234.bkidx = bike1234.bkidx
		JOIN member1234 ON rent1234.midx = member1234.midx
		JOIN bikeinfo1234 ON bike1234.bikeType = bikeinfo1234.bikeType
		JOIN rentalshop1234 ON rentalshop1234.rsidx = #{1}
		WHERE rent1234.ridx = #{0} 
    </select>
    <!-- 최종 반납하기에서 컬럼값들가져오기  -->
    <select id="bikeRentOneSelect" resultType="com.myezen.myapp.domain.BikeJoinVo">
		SELECT *
		FROM rent1234
		JOIN bike1234 ON rent1234.bkidx = bike1234.bkidx
		JOIN rentalshop1234 ON rentalshop1234.rsidx = #{1}
		WHERE rent1234.ridx = #{0} AND bike1234.BIKESTATE = 'N'
    </select>
	
	<update id="bikeRentBikeUpdate" parameterType="com.myezen.myapp.domain.BikeJoinVo">
		UPDATE bike1234
		SET
		bikeLocation = #{1}, bikeState='Y' 
		WHERE
		bkidx = #{0}
	</update>
	<insert id="bikeRentReturnInsert" parameterType="com.myezen.myapp.domain.BikeJoinVo">
		 INSERT INTO RETURN1234
		(rtidx,RETURNDAY,returnplace,ridx)
		VALUES
		(rtidx_seq.nextval,SYSDATE,#{0},#{1}) 
	</insert>
	
	<select id="bikeRentHistoryList" parameterType="int" resultType="com.myezen.myapp.domain.BikeJoinVo">
		SELECT membername,memberphone,bike1234.biketype,rentplace,returnplace,rentday,returnday,rentprice 
		FROM rent1234
		JOIN member1234 ON member1234.midx = rent1234.midx
		JOIN return1234 ON return1234.ridx = rent1234.ridx
		JOIN bike1234 ON bike1234.bkidx = rent1234.bkidx
		JOIN bikeinfo1234	ON bikeinfo1234.biketype= bike1234.biketype
		where member1234.midx = #{midx}
		ORDER BY rent1234.rentday DESC
	</select>
	  <!-- 대여소마다 각각의 자전거 남은 갯수 가져오기  -->
	<select id="availableStations" resultType="com.myezen.myapp.domain.BikeJoinVo">
		SELECT a.RSIDX,a.RENTALSHOPLOCATION, a.RENTALSHOPNAME, a.RENTALSHOPLATITUDE, a.RENTALSHOPLONGITUDE, COUNT(b.BKIDX) AS rentalshopCnt
		FROM RENTALSHOP1234 a
		LEFT JOIN BIKE1234 b ON a.RENTALSHOPNAME = b.BIKELOCATION AND b.BIKESTATE = 'Y'
		GROUP BY a.RENTALSHOPNAME, a.RENTALSHOPLATITUDE, a.RENTALSHOPLONGITUDE,a.RSIDX,a.RENTALSHOPLOCATION
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

</mapper>